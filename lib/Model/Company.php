<?php
/**
 * Company
 *
 * PHP version 5
 *
 * @category Class
 * @package  YouSignClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yousign API Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1
 * Contact: support@yousign.fr
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace YouSignClient\Model;

use \ArrayAccess;
use \YouSignClient\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @package  YouSignClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Company implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'logo' => 'string',
'url' => 'string',
'config' => '\YouSignClient\Model\CompanyConfig',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'procedure_comments_enabled' => 'bool',
'email_procedure_from_name' => 'string',
'saml_enabled__internal' => 'bool',
'user_activation__internal' => 'bool',
'slug__internal' => 'string',
'password_policy_pattern' => 'string',
'password_policy_description' => 'string',
'procedure_related_files_enable' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'logo' => null,
'url' => null,
'config' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'procedure_comments_enabled' => null,
'email_procedure_from_name' => null,
'saml_enabled__internal' => null,
'user_activation__internal' => null,
'slug__internal' => null,
'password_policy_pattern' => null,
'password_policy_description' => null,
'procedure_related_files_enable' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'logo' => 'logo',
'url' => 'url',
'config' => 'config',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'procedure_comments_enabled' => 'procedureCommentsEnabled',
'email_procedure_from_name' => 'emailProcedureFromName',
'saml_enabled__internal' => 'samlEnabled (internal)',
'user_activation__internal' => 'userActivation (internal)',
'slug__internal' => 'slug (internal)',
'password_policy_pattern' => 'passwordPolicyPattern',
'password_policy_description' => 'passwordPolicyDescription',
'procedure_related_files_enable' => 'procedureRelatedFilesEnable'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'logo' => 'setLogo',
'url' => 'setUrl',
'config' => 'setConfig',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'procedure_comments_enabled' => 'setProcedureCommentsEnabled',
'email_procedure_from_name' => 'setEmailProcedureFromName',
'saml_enabled__internal' => 'setSamlEnabledInternal',
'user_activation__internal' => 'setUserActivationInternal',
'slug__internal' => 'setSlugInternal',
'password_policy_pattern' => 'setPasswordPolicyPattern',
'password_policy_description' => 'setPasswordPolicyDescription',
'procedure_related_files_enable' => 'setProcedureRelatedFilesEnable'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'logo' => 'getLogo',
'url' => 'getUrl',
'config' => 'getConfig',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'procedure_comments_enabled' => 'getProcedureCommentsEnabled',
'email_procedure_from_name' => 'getEmailProcedureFromName',
'saml_enabled__internal' => 'getSamlEnabledInternal',
'user_activation__internal' => 'getUserActivationInternal',
'slug__internal' => 'getSlugInternal',
'password_policy_pattern' => 'getPasswordPolicyPattern',
'password_policy_description' => 'getPasswordPolicyDescription',
'procedure_related_files_enable' => 'getProcedureRelatedFilesEnable'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['procedure_comments_enabled'] = isset($data['procedure_comments_enabled']) ? $data['procedure_comments_enabled'] : null;
        $this->container['email_procedure_from_name'] = isset($data['email_procedure_from_name']) ? $data['email_procedure_from_name'] : null;
        $this->container['saml_enabled__internal'] = isset($data['saml_enabled__internal']) ? $data['saml_enabled__internal'] : null;
        $this->container['user_activation__internal'] = isset($data['user_activation__internal']) ? $data['user_activation__internal'] : null;
        $this->container['slug__internal'] = isset($data['slug__internal']) ? $data['slug__internal'] : null;
        $this->container['password_policy_pattern'] = isset($data['password_policy_pattern']) ? $data['password_policy_pattern'] : null;
        $this->container['password_policy_description'] = isset($data['password_policy_description']) ? $data['password_policy_description'] : null;
        $this->container['procedure_related_files_enable'] = isset($data['procedure_related_files_enable']) ? $data['procedure_related_files_enable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Object's ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Company name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo Company logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Custom URL for the Company (internal usage only, should not be used)
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \YouSignClient\Model\CompanyConfig
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \YouSignClient\Model\CompanyConfig $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Created date of the object
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Updated date of the object
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets procedure_comments_enabled
     *
     * @return bool
     */
    public function getProcedureCommentsEnabled()
    {
        return $this->container['procedure_comments_enabled'];
    }

    /**
     * Sets procedure_comments_enabled
     *
     * @param bool $procedure_comments_enabled Define if comments are available for the company.
     *
     * @return $this
     */
    public function setProcedureCommentsEnabled($procedure_comments_enabled)
    {
        $this->container['procedure_comments_enabled'] = $procedure_comments_enabled;

        return $this;
    }

    /**
     * Gets email_procedure_from_name
     *
     * @return string
     */
    public function getEmailProcedureFromName()
    {
        return $this->container['email_procedure_from_name'];
    }

    /**
     * Sets email_procedure_from_name
     *
     * @param string $email_procedure_from_name Default procedure email from name for company
     *
     * @return $this
     */
    public function setEmailProcedureFromName($email_procedure_from_name)
    {
        $this->container['email_procedure_from_name'] = $email_procedure_from_name;

        return $this;
    }

    /**
     * Gets saml_enabled__internal
     *
     * @return bool
     */
    public function getSamlEnabledInternal()
    {
        return $this->container['saml_enabled__internal'];
    }

    /**
     * Sets saml_enabled__internal
     *
     * @param bool $saml_enabled__internal Internal usage, should not be used
     *
     * @return $this
     */
    public function setSamlEnabledInternal($saml_enabled__internal)
    {
        $this->container['saml_enabled__internal'] = $saml_enabled__internal;

        return $this;
    }

    /**
     * Gets user_activation__internal
     *
     * @return bool
     */
    public function getUserActivationInternal()
    {
        return $this->container['user_activation__internal'];
    }

    /**
     * Sets user_activation__internal
     *
     * @param bool $user_activation__internal Internal usage, should not be used
     *
     * @return $this
     */
    public function setUserActivationInternal($user_activation__internal)
    {
        $this->container['user_activation__internal'] = $user_activation__internal;

        return $this;
    }

    /**
     * Gets slug__internal
     *
     * @return string
     */
    public function getSlugInternal()
    {
        return $this->container['slug__internal'];
    }

    /**
     * Sets slug__internal
     *
     * @param string $slug__internal Internal usage, should not be used
     *
     * @return $this
     */
    public function setSlugInternal($slug__internal)
    {
        $this->container['slug__internal'] = $slug__internal;

        return $this;
    }

    /**
     * Gets password_policy_pattern
     *
     * @return string
     */
    public function getPasswordPolicyPattern()
    {
        return $this->container['password_policy_pattern'];
    }

    /**
     * Sets password_policy_pattern
     *
     * @param string $password_policy_pattern Pattern of the password policy for the company
     *
     * @return $this
     */
    public function setPasswordPolicyPattern($password_policy_pattern)
    {
        $this->container['password_policy_pattern'] = $password_policy_pattern;

        return $this;
    }

    /**
     * Gets password_policy_description
     *
     * @return string
     */
    public function getPasswordPolicyDescription()
    {
        return $this->container['password_policy_description'];
    }

    /**
     * Sets password_policy_description
     *
     * @param string $password_policy_description Description for the password policy
     *
     * @return $this
     */
    public function setPasswordPolicyDescription($password_policy_description)
    {
        $this->container['password_policy_description'] = $password_policy_description;

        return $this;
    }

    /**
     * Gets procedure_related_files_enable
     *
     * @return bool
     */
    public function getProcedureRelatedFilesEnable()
    {
        return $this->container['procedure_related_files_enable'];
    }

    /**
     * Sets procedure_related_files_enable
     *
     * @param bool $procedure_related_files_enable Defined if the company anable the related files
     *
     * @return $this
     */
    public function setProcedureRelatedFilesEnable($procedure_related_files_enable)
    {
        $this->container['procedure_related_files_enable'] = $procedure_related_files_enable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
