<?php
/**
 * ProceduresApi
 * PHP version 5
 *
 * @category Class
 * @package  YouSignClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Yousign API Swagger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1
 * Contact: support@yousign.fr
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.5
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace YouSignClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use YouSignClient\ApiException;
use YouSignClient\Configuration;
use YouSignClient\HeaderSelector;
use YouSignClient\ObjectSerializer;

/**
 * ProceduresApi Class Doc Comment
 *
 * @category Class
 * @package  YouSignClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProceduresApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportProceduresGet
     *
     * Export Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function exportProceduresGet($authorization, $status = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        list($response) = $this->exportProceduresGetWithHttpInfo($authorization, $status, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);
        return $response;
    }

    /**
     * Operation exportProceduresGetWithHttpInfo
     *
     * Export Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportProceduresGetWithHttpInfo($authorization, $status = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        $returnType = 'string';
        $request = $this->exportProceduresGetRequest($authorization, $status, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportProceduresGetAsync
     *
     * Export Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportProceduresGetAsync($authorization, $status = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        return $this->exportProceduresGetAsyncWithHttpInfo($authorization, $status, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportProceduresGetAsyncWithHttpInfo
     *
     * Export Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportProceduresGetAsyncWithHttpInfo($authorization, $status = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        $returnType = 'string';
        $request = $this->exportProceduresGetRequest($authorization, $status, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportProceduresGet'
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function exportProceduresGetRequest($authorization, $status = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling exportProceduresGet'
            );
        }

        $resourcePath = '/export/procedures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($members_firstname !== null) {
            $queryParams['members.firstname'] = ObjectSerializer::toQueryValue($members_firstname);
        }
        // query params
        if ($members_lastname !== null) {
            $queryParams['members.lastname'] = ObjectSerializer::toQueryValue($members_lastname);
        }
        // query params
        if ($members_phone !== null) {
            $queryParams['members.phone'] = ObjectSerializer::toQueryValue($members_phone);
        }
        // query params
        if ($members_email !== null) {
            $queryParams['members.email'] = ObjectSerializer::toQueryValue($members_email);
        }
        // query params
        if ($files_name !== null) {
            $queryParams['files.name'] = ObjectSerializer::toQueryValue($files_name);
        }
        // query params
        if (is_array($created_at)) {
            $created_at = ObjectSerializer::serializeCollection($created_at, 'multi', true);
        }
        if ($created_at !== null) {
            $queryParams['createdAt'] = ObjectSerializer::toQueryValue($created_at);
        }
        // query params
        if (is_array($updated_at)) {
            $updated_at = ObjectSerializer::serializeCollection($updated_at, 'multi', true);
        }
        if ($updated_at !== null) {
            $queryParams['updatedAt'] = ObjectSerializer::toQueryValue($updated_at);
        }
        // query params
        if (is_array($expires_at)) {
            $expires_at = ObjectSerializer::serializeCollection($expires_at, 'multi', true);
        }
        if ($expires_at !== null) {
            $queryParams['expiresAt'] = ObjectSerializer::toQueryValue($expires_at);
        }
        // query params
        if (is_array($deleted_at)) {
            $deleted_at = ObjectSerializer::serializeCollection($deleted_at, 'multi', true);
        }
        if ($deleted_at !== null) {
            $queryParams['deletedAt'] = ObjectSerializer::toQueryValue($deleted_at);
        }
        // query params
        if (is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, 'multi', true);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresGet
     *
     * Get Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  bool $template Used to get Procedure template list (optional)
     * @param  string[] $members Get Procedure list for given members (paraph mode) (optional)
     * @param  string $items_per_page Number of items per page for the pagination (optional)
     * @param  bool $pagination Disable the pagination (optional)
     * @param  int $page Page of the pagination (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput[]
     */
    public function proceduresGet($authorization, $status = null, $template = null, $members = null, $items_per_page = null, $pagination = null, $page = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        list($response) = $this->proceduresGetWithHttpInfo($authorization, $status, $template, $members, $items_per_page, $pagination, $page, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);
        return $response;
    }

    /**
     * Operation proceduresGetWithHttpInfo
     *
     * Get Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  bool $template Used to get Procedure template list (optional)
     * @param  string[] $members Get Procedure list for given members (paraph mode) (optional)
     * @param  string $items_per_page Number of items per page for the pagination (optional)
     * @param  bool $pagination Disable the pagination (optional)
     * @param  int $page Page of the pagination (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput[], HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresGetWithHttpInfo($authorization, $status = null, $template = null, $members = null, $items_per_page = null, $pagination = null, $page = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput[]';
        $request = $this->proceduresGetRequest($authorization, $status, $template, $members, $items_per_page, $pagination, $page, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresGetAsync
     *
     * Get Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  bool $template Used to get Procedure template list (optional)
     * @param  string[] $members Get Procedure list for given members (paraph mode) (optional)
     * @param  string $items_per_page Number of items per page for the pagination (optional)
     * @param  bool $pagination Disable the pagination (optional)
     * @param  int $page Page of the pagination (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresGetAsync($authorization, $status = null, $template = null, $members = null, $items_per_page = null, $pagination = null, $page = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        return $this->proceduresGetAsyncWithHttpInfo($authorization, $status, $template, $members, $items_per_page, $pagination, $page, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresGetAsyncWithHttpInfo
     *
     * Get Procedure list
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  bool $template Used to get Procedure template list (optional)
     * @param  string[] $members Get Procedure list for given members (paraph mode) (optional)
     * @param  string $items_per_page Number of items per page for the pagination (optional)
     * @param  bool $pagination Disable the pagination (optional)
     * @param  int $page Page of the pagination (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresGetAsyncWithHttpInfo($authorization, $status = null, $template = null, $members = null, $items_per_page = null, $pagination = null, $page = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput[]';
        $request = $this->proceduresGetRequest($authorization, $status, $template, $members, $items_per_page, $pagination, $page, $name, $members_firstname, $members_lastname, $members_phone, $members_email, $files_name, $created_at, $updated_at, $expires_at, $deleted_at, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresGet'
     *
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $status Return Procedure list based on the status for each Procedure (optional)
     * @param  bool $template Used to get Procedure template list (optional)
     * @param  string[] $members Get Procedure list for given members (paraph mode) (optional)
     * @param  string $items_per_page Number of items per page for the pagination (optional)
     * @param  bool $pagination Disable the pagination (optional)
     * @param  int $page Page of the pagination (optional)
     * @param  string $name Filter by name (contains) (optional)
     * @param  string $members_firstname Filter by member firstname (contains) (optional)
     * @param  string $members_lastname Filter by member lastname (contains) (optional)
     * @param  string $members_phone Filter by member phone (contains) (optional)
     * @param  string $members_email Filter by member email (contains) (optional)
     * @param  string $files_name Filter by file name (contains) (optional)
     * @param  \DateTime[] $created_at Filter by creation date  createdAt[after]&#x3D;2017-09-18 createdAt[before]&#x3D;2017-09-18 createdAt[strictly_after]&#x3D;2017-09-18 createdAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $updated_at Filter by update date  updatedAt[after]&#x3D;2017-09-18 updatedAt[before]&#x3D;2017-09-18 updatedAt[strictly_after]&#x3D;2017-09-18 updatedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $expires_at Filter by expire date  expiresAt[after]&#x3D;2017-09-18 expiresAt[before]&#x3D;2017-09-18 expiresAt[strictly_after]&#x3D;2017-09-18 expiresAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  \DateTime[] $deleted_at Filter by delete date  deletedAt[after]&#x3D;2017-09-18 deletedAt[before]&#x3D;2017-09-18 deletedAt[strictly_after]&#x3D;2017-09-18 deletedAt[strictly_before]&#x3D;2017-09-18 (optional)
     * @param  string[] $order Order by attribut (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresGetRequest($authorization, $status = null, $template = null, $members = null, $items_per_page = null, $pagination = null, $page = null, $name = null, $members_firstname = null, $members_lastname = null, $members_phone = null, $members_email = null, $files_name = null, $created_at = null, $updated_at = null, $expires_at = null, $deleted_at = null, $order = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresGet'
            );
        }

        $resourcePath = '/procedures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($template !== null) {
            $queryParams['template'] = ObjectSerializer::toQueryValue($template);
        }
        // query params
        if (is_array($members)) {
            $members = ObjectSerializer::serializeCollection($members, 'multi', true);
        }
        if ($members !== null) {
            $queryParams['members'] = ObjectSerializer::toQueryValue($members);
        }
        // query params
        if ($items_per_page !== null) {
            $queryParams['itemsPerPage'] = ObjectSerializer::toQueryValue($items_per_page);
        }
        // query params
        if ($pagination !== null) {
            $queryParams['pagination'] = ObjectSerializer::toQueryValue($pagination);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($members_firstname !== null) {
            $queryParams['members.firstname'] = ObjectSerializer::toQueryValue($members_firstname);
        }
        // query params
        if ($members_lastname !== null) {
            $queryParams['members.lastname'] = ObjectSerializer::toQueryValue($members_lastname);
        }
        // query params
        if ($members_phone !== null) {
            $queryParams['members.phone'] = ObjectSerializer::toQueryValue($members_phone);
        }
        // query params
        if ($members_email !== null) {
            $queryParams['members.email'] = ObjectSerializer::toQueryValue($members_email);
        }
        // query params
        if ($files_name !== null) {
            $queryParams['files.name'] = ObjectSerializer::toQueryValue($files_name);
        }
        // query params
        if (is_array($created_at)) {
            $created_at = ObjectSerializer::serializeCollection($created_at, 'multi', true);
        }
        if ($created_at !== null) {
            $queryParams['createdAt'] = ObjectSerializer::toQueryValue($created_at);
        }
        // query params
        if (is_array($updated_at)) {
            $updated_at = ObjectSerializer::serializeCollection($updated_at, 'multi', true);
        }
        if ($updated_at !== null) {
            $queryParams['updatedAt'] = ObjectSerializer::toQueryValue($updated_at);
        }
        // query params
        if (is_array($expires_at)) {
            $expires_at = ObjectSerializer::serializeCollection($expires_at, 'multi', true);
        }
        if ($expires_at !== null) {
            $queryParams['expiresAt'] = ObjectSerializer::toQueryValue($expires_at);
        }
        // query params
        if (is_array($deleted_at)) {
            $deleted_at = ObjectSerializer::serializeCollection($deleted_at, 'multi', true);
        }
        if ($deleted_at !== null) {
            $queryParams['deletedAt'] = ObjectSerializer::toQueryValue($deleted_at);
        }
        // query params
        if (is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, 'multi', true);
        }
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdDelete
     *
     * Delete a Procedure
     *
     * @param  string $id id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function proceduresIdDelete($id, $authorization)
    {
        $this->proceduresIdDeleteWithHttpInfo($id, $authorization);
    }

    /**
     * Operation proceduresIdDeleteWithHttpInfo
     *
     * Delete a Procedure
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdDeleteWithHttpInfo($id, $authorization)
    {
        $returnType = '';
        $request = $this->proceduresIdDeleteRequest($id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdDeleteAsync
     *
     * Delete a Procedure
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdDeleteAsync($id, $authorization)
    {
        return $this->proceduresIdDeleteAsyncWithHttpInfo($id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdDeleteAsyncWithHttpInfo
     *
     * Delete a Procedure
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdDeleteAsyncWithHttpInfo($id, $authorization)
    {
        $returnType = '';
        $request = $this->proceduresIdDeleteRequest($id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdDelete'
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdDeleteRequest($id, $authorization)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdDelete'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdDelete'
            );
        }

        $resourcePath = '/procedures/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdDuplicatePost
     *
     * Duplicate a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureDuplicateInput $body body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput
     */
    public function proceduresIdDuplicatePost($body, $authorization, $id)
    {
        list($response) = $this->proceduresIdDuplicatePostWithHttpInfo($body, $authorization, $id);
        return $response;
    }

    /**
     * Operation proceduresIdDuplicatePostWithHttpInfo
     *
     * Duplicate a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureDuplicateInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdDuplicatePostWithHttpInfo($body, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdDuplicatePostRequest($body, $authorization, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdDuplicatePostAsync
     *
     * Duplicate a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureDuplicateInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdDuplicatePostAsync($body, $authorization, $id)
    {
        return $this->proceduresIdDuplicatePostAsyncWithHttpInfo($body, $authorization, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdDuplicatePostAsyncWithHttpInfo
     *
     * Duplicate a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureDuplicateInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdDuplicatePostAsyncWithHttpInfo($body, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdDuplicatePostRequest($body, $authorization, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdDuplicatePost'
     *
     * @param  \YouSignClient\Model\ProcedureDuplicateInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdDuplicatePostRequest($body, $authorization, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling proceduresIdDuplicatePost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdDuplicatePost'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdDuplicatePost'
            );
        }

        $resourcePath = '/procedures/{id}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdGet
     *
     * Find a Procedure by ID
     *
     * @param  string $id id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput
     */
    public function proceduresIdGet($id, $authorization)
    {
        list($response) = $this->proceduresIdGetWithHttpInfo($id, $authorization);
        return $response;
    }

    /**
     * Operation proceduresIdGetWithHttpInfo
     *
     * Find a Procedure by ID
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdGetWithHttpInfo($id, $authorization)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdGetRequest($id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdGetAsync
     *
     * Find a Procedure by ID
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdGetAsync($id, $authorization)
    {
        return $this->proceduresIdGetAsyncWithHttpInfo($id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdGetAsyncWithHttpInfo
     *
     * Find a Procedure by ID
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdGetAsyncWithHttpInfo($id, $authorization)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdGetRequest($id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdGet'
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdGetRequest($id, $authorization)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdGet'
            );
        }

        $resourcePath = '/procedures/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdProofGet
     *
     * Get a Procedure proof file
     *
     * @param  string $id id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function proceduresIdProofGet($id, $authorization)
    {
        list($response) = $this->proceduresIdProofGetWithHttpInfo($id, $authorization);
        return $response;
    }

    /**
     * Operation proceduresIdProofGetWithHttpInfo
     *
     * Get a Procedure proof file
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdProofGetWithHttpInfo($id, $authorization)
    {
        $returnType = 'string';
        $request = $this->proceduresIdProofGetRequest($id, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdProofGetAsync
     *
     * Get a Procedure proof file
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdProofGetAsync($id, $authorization)
    {
        return $this->proceduresIdProofGetAsyncWithHttpInfo($id, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdProofGetAsyncWithHttpInfo
     *
     * Get a Procedure proof file
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdProofGetAsyncWithHttpInfo($id, $authorization)
    {
        $returnType = 'string';
        $request = $this->proceduresIdProofGetRequest($id, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdProofGet'
     *
     * @param  string $id (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdProofGetRequest($id, $authorization)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdProofGet'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdProofGet'
            );
        }

        $resourcePath = '/procedures/{id}/proof';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdPut
     *
     * Update a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput
     */
    public function proceduresIdPut($body, $content_type, $authorization, $id)
    {
        list($response) = $this->proceduresIdPutWithHttpInfo($body, $content_type, $authorization, $id);
        return $response;
    }

    /**
     * Operation proceduresIdPutWithHttpInfo
     *
     * Update a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdPutWithHttpInfo($body, $content_type, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdPutRequest($body, $content_type, $authorization, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdPutAsync
     *
     * Update a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdPutAsync($body, $content_type, $authorization, $id)
    {
        return $this->proceduresIdPutAsyncWithHttpInfo($body, $content_type, $authorization, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdPutAsyncWithHttpInfo
     *
     * Update a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdPutAsyncWithHttpInfo($body, $content_type, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdPutRequest($body, $content_type, $authorization, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdPut'
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdPutRequest($body, $content_type, $authorization, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling proceduresIdPut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling proceduresIdPut'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdPut'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdPut'
            );
        }

        $resourcePath = '/procedures/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresIdRemindPost
     *
     * Remind a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureRemindInput $body body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput
     */
    public function proceduresIdRemindPost($body, $authorization, $id)
    {
        list($response) = $this->proceduresIdRemindPostWithHttpInfo($body, $authorization, $id);
        return $response;
    }

    /**
     * Operation proceduresIdRemindPostWithHttpInfo
     *
     * Remind a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureRemindInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresIdRemindPostWithHttpInfo($body, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdRemindPostRequest($body, $authorization, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresIdRemindPostAsync
     *
     * Remind a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureRemindInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdRemindPostAsync($body, $authorization, $id)
    {
        return $this->proceduresIdRemindPostAsyncWithHttpInfo($body, $authorization, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresIdRemindPostAsyncWithHttpInfo
     *
     * Remind a Procedure
     *
     * @param  \YouSignClient\Model\ProcedureRemindInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresIdRemindPostAsyncWithHttpInfo($body, $authorization, $id)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresIdRemindPostRequest($body, $authorization, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresIdRemindPost'
     *
     * @param  \YouSignClient\Model\ProcedureRemindInput $body (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresIdRemindPostRequest($body, $authorization, $id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling proceduresIdRemindPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresIdRemindPost'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling proceduresIdRemindPost'
            );
        }

        $resourcePath = '/procedures/{id}/remind';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation proceduresPost
     *
     * Create a new Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YouSignClient\Model\ProcedureOutput
     */
    public function proceduresPost($body, $content_type, $authorization)
    {
        list($response) = $this->proceduresPostWithHttpInfo($body, $content_type, $authorization);
        return $response;
    }

    /**
     * Operation proceduresPostWithHttpInfo
     *
     * Create a new Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \YouSignClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YouSignClient\Model\ProcedureOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function proceduresPostWithHttpInfo($body, $content_type, $authorization)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresPostRequest($body, $content_type, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YouSignClient\Model\ProcedureOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation proceduresPostAsync
     *
     * Create a new Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresPostAsync($body, $content_type, $authorization)
    {
        return $this->proceduresPostAsyncWithHttpInfo($body, $content_type, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation proceduresPostAsyncWithHttpInfo
     *
     * Create a new Procedure
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function proceduresPostAsyncWithHttpInfo($body, $content_type, $authorization)
    {
        $returnType = '\YouSignClient\Model\ProcedureOutput';
        $request = $this->proceduresPostRequest($body, $content_type, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'proceduresPost'
     *
     * @param  \YouSignClient\Model\ProcedureInput $body (required)
     * @param  string $content_type The MIME type of the body of the request (required)
     * @param  string $authorization Authentication credentials for HTTP authentication (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function proceduresPostRequest($body, $content_type, $authorization)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling proceduresPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling proceduresPost'
            );
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null || (is_array($authorization) && count($authorization) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization when calling proceduresPost'
            );
        }

        $resourcePath = '/procedures';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
